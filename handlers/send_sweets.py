from aiogram import types, Router
from aiogram.filters import Command, CommandObject
from services.telethon_client import telethon_client
from services.utils import get_iriski_word, get_otpravleno_word
from services.iris_api import iris
from config import ADMIN_IDS

router = Router()


@router.message(Command("send_sweets"))
async def cmd_send_sweets(message: types.Message, command: CommandObject):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    if not command.args:
        await message.answer(
            "‚ùó –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ @username –∏–ª–∏ @user_id.\n\n–ü—Ä–∏–º–µ—Ä:\n`/send_sweets 10 @lukinism`\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å "
            "–Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
            parse_mode="Markdown")
        return

    lines = command.args.strip().split('\n')
    first_line = lines[0].strip()
    comment = "\n".join(lines[1:]).strip() if len(lines) > 1 else "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"

    parts = first_line.split()
    if len(parts) != 2:
        await message.answer(
            "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n–î–æ–ª–∂–Ω–æ –±—ã—Ç—å: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ @username/@user_id —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.",
            parse_mode="Markdown")
        return

    try:
        sweets_count = int(parts[0])
        user_input = parts[1]

        if not user_input.startswith("@"):
            await message.answer("‚ùó Username –∏–ª–∏ ID –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '@'.", parse_mode="Markdown")
            return

        user_ref = user_input[1:]

        if user_ref.isdigit():
            user_id = int(user_ref)
            display_name = f"ID {user_id}"
        else:
            try:
                user_id, username, first_name, last_name = await telethon_client.get_user_info(user_ref)
                print(user_id, username)
                display_name = f"@{username}" if username else f"{first_name or ''} {last_name or ''}".strip()
            except Exception as e:
                await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_input}.\n–û—à–∏–±–∫–∞: {e}")
                return

    except ValueError:
        await message.answer("‚ùó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ä–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.", parse_mode="Markdown")
        return

    try:
        result = await iris.give_sweets(
            user_id=user_id,
            sweets=sweets_count,
            comment=comment
        )

        if "error" in result:
            error_description = result["error"].get("description", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏—Ä–∏—Å–æ–∫: {error_description}")
        else:
            await message.answer(
                f"‚úÖ {get_otpravleno_word(sweets_count)} {sweets_count} {get_iriski_word(sweets_count)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {display_name}.\n\n"
                f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n{comment}",
                parse_mode="Markdown"
            )
    except Exception as e:
        await message.answer(f"‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏—Ä–∏—Å–æ–∫: {e}")
