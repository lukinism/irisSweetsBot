from aiogram import types, Router
from aiogram.filters import Command, CommandObject
from services.telethon_client import telethon_client
from services.utils import get_otpravleno_word
from services.iris_api import iris
from config import ADMIN_IDS

router = Router()

@router.message(Command("send_gold"))
async def cmd_send_gold(message: types.Message, command: CommandObject):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    if not command.args:
        await message.answer(
            "‚ùó –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ @username –∏–ª–∏ ID.\n\n–ü—Ä–∏–º–µ—Ä:\n`/send_gold 5 @lukinism`\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
            parse_mode="Markdown")
        return

    lines = command.args.strip().split('\n')
    first_line = lines[0].strip()
    comment = "\n".join(lines[1:]).strip() if len(lines) > 1 else "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"

    parts = first_line.split()
    if len(parts) != 2:
        await message.answer(
            "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n–î–æ–ª–∂–Ω–æ –±—ã—Ç—å: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ @username/ID —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.",
            parse_mode="Markdown")
        return

    try:
        gold_count = int(parts[0])
        if gold_count <= 0:
            await message.answer("‚ùó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–¥—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return

        user_input = parts[1]
        user_ref = user_input[1:] if user_input.startswith("@") else user_input

        if user_ref.isdigit():
            user_id = int(user_ref)
            display_name = f"ID {user_id}"
        else:
            try:
                user_id, username, first_name, last_name = await telethon_client.get_user_info(user_ref)
                display_name = f"@{username}" if username else f"{first_name or ''} {last_name or ''}".strip()
            except Exception as e:
                await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_input}.\n–û—à–∏–±–∫–∞: {e}")
                return

    except ValueError:
        await message.answer("‚ùó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.", parse_mode="Markdown")
        return

    try:
        result = await iris.give_gold(
            user_id=user_id,
            gold=gold_count,
            comment=comment
        )

        if "error" in result:
            error_description = result["error"].get("description", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–æ–ª–¥—ã: {error_description}")
        else:
            comment_text = f"\n\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n{comment}" if comment != "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è" else ""
            await message.answer(
                f"‚úÖ {get_otpravleno_word(gold_count)} {gold_count} –≥–æ–ª–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {display_name}.{comment_text}",
                parse_mode="Markdown"
            )
    except Exception as e:
        await message.answer(f"‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–æ–ª–¥—ã: {e}")
